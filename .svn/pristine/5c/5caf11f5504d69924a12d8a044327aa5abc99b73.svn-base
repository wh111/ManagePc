<template>
    <div class="moudle-wrap modal clearfix" id="content" ref="content">
        <subject-head @change="changeSubject"></subject-head>
        <!--<el-col :span="3" style="height:100%">-->
        <!--<div id="menu" ref="menu">-->
        <!--<el-menu default-active="2" class="el-menu-vertical-demo" @open="handleOpen" @close="handleClose" theme="dark">-->
        <!--<el-submenu index="1">-->
        <!--<template slot="title">一年级</template>-->
        <!--<el-submenu index="1-1">-->
        <!--<template slot="title">上学期</template>-->
        <!--<el-menu-item index="1-1-1">第1单元</el-menu-item>-->
        <!--<el-menu-item index="1-1-2">第2单元</el-menu-item>-->
        <!--<el-menu-item index="1-1-3">第3单元</el-menu-item>-->
        <!--<el-menu-item index="1-1-4">第4单元</el-menu-item>-->
        <!--<el-menu-item index="1-1-5">第5单元</el-menu-item>-->
        <!--</el-submenu>-->
        <!--<el-submenu index="1-2">-->
        <!--<template slot="title">下学期</template>-->
        <!--<el-menu-item index="1-2-1">第1单元</el-menu-item>-->
        <!--<el-menu-item index="1-2-2">第2单元</el-menu-item>-->
        <!--<el-menu-item index="1-2-3">第3单元</el-menu-item>-->
        <!--<el-menu-item index="1-2-4">第4单元</el-menu-item>-->
        <!--<el-menu-item index="1-2-5">第5单元</el-menu-item>-->
        <!--</el-submenu>-->
        <!--</el-submenu>-->
        <!--<el-menu-item index="2">二年级</el-menu-item>-->
        <!--<el-menu-item index="3">三年级</el-menu-item>-->
        <!--</el-menu>-->
        <!--</div>-->

        <!--</el-col>-->
        <el-col>
            <div>
                <el-form :rules="rules" ref="formValidate" :model="formValidate" :inline="true" class="demo-ruleForm">
                    <el-row class="search-from">
                        <el-form-item label="题型" prop="questionsTypeId">
                            <el-select size="small" v-model="formValidate.questionsTypeId" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <question-type-option></question-type-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="权限" prop="openType">
                            <el-select size="small" v-model="formValidate.openType" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <el-option label="共有题库" value="0"></el-option>
                                <el-option label="私有题库" value="1"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="难度" prop="diffLevelCode">
                            <el-select size="small" v-model="formValidate.diffLevelCode" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <question-diff-level-option></question-diff-level-option>
                                <!--<el-option v-for="index in 10" :label="index" :value="index"-->
                                <!--:key="index"></el-option>-->
                            </el-select>
                        </el-form-item>
                        <el-form-item label="知识点" prop="knowledgeId">
                            <el-select size="small" v-model="formValidate.knowledgeId" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <el-option v-for="item in knowledgeIdArr" :key="item.id" :label="item.name"
                                           :value="item.id"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="题号" prop="id">
                            <el-input size="small" v-model="formValidate.id" placeholder="输入题号"></el-input>
                        </el-form-item>
                        <el-form-item prop="title" label="题目">
                            <el-input size="small" v-model="formValidate.title" placeholder="输入题目"></el-input>
                        </el-form-item>
                        <el-form-item>
                            <el-button class="search-btn" size="small" type="primary" @click="searchEvent">搜索
                            </el-button>
                        </el-form-item>
                    </el-row>
                    <el-col :span="14" style="margin-bottom:20px">
                        <el-button size="small" class="greenButton" @click="add">新建试题</el-button>
                        <el-button size="small" class="orangeButton" @click="toChannel">导入题目</el-button>

                    </el-col>
                </el-form>
            </div>

            <div id="myTable" ref="myTable">
                <el-table align="center" :context="self" :height="dynamicHt" :data="tableData" tooltip-effect="dark"
                          style="width: 100%" @selection-change="handleSelectionChange">
                    <el-table-column type="selection" width="20"></el-table-column>
                    <el-table-column label="题号" prop="id" width="70"></el-table-column>
                    <el-table-column label="题型" align="center" prop="questionsTypeName"
                                     show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.questionsTypeName || scope.row.basicType | questionsBasicType }}
                        </template>
                    </el-table-column>
                    <el-table-column label="难度" align="center" prop="diffLevelCode" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.diffLevelCode | diffLevelCode(self) }}
                        </template>
                    </el-table-column>
                    <el-table-column label="知识点" prop="knowledgeList" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.knowledgeList | getArrText('name') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="题目" prop="title" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ (scope.row.title || '（具有公共候选项的题目）') | delHtmlTag | sliceText(20,'...') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" align="center" width="160">
                        <template slot-scope="scope">
                            <el-button class="tableMakeItem" size="small" @click="show(scope.row)">查看</el-button>
                            <el-button class="tableMakeItem" size="small" @click="edit(scope.row)">修改</el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <div style="margin: 10px 50px 10px 0;">
                    <el-button :disabled="multipleSelection.length == '0'" size="small" class="deleteButton"
                               @click="toRemove('')">批量删除
                    </el-button>
                    <div style="float: right;">
                        <el-pagination @size-change="changePageSize" @current-change="changePage"
                                       :current-page.sync="myPages.currentPage" :page-size="myPages.pageSize"
                                       layout="total,prev, pager, next, jumper" :total="totalCount">
                        </el-pagination>
                    </div>
                </div>
            </div>
        </el-col>
        <!--查看试题-->
        <Modal :mask-closable="false" width="1000" v-model="showModal" title="查看试题" class-name="vertical-center-modal"
               :loading="loading">
            <modal-header slot="header" :content="showId"></modal-header>
          <show v-if="showModal" @cancel="cancel" @show="subCallback" :operaility-data="operailityData"
                type="center"></show>
            <div slot="footer"></div>
        </Modal>
        <!--新增试题-->
        <Modal :mask-closable="false" width="1000" v-model="addModal" title="新增试题" class-name="vertical-center-modal"
               :loading="loading">
            <modal-header slot="header" :content="addId"></modal-header>
            <edit v-if="addModal" @cancel="cancel" @add="subCallback"></edit>
            <div slot="footer"></div>
        </Modal>
        <!--修改试题-->
        <Modal :mask-closable="false" width="1000" v-model="editModal" title="修改试题" class-name="vertical-center-modal"
               :loading="loading">
            <modal-header slot="header" :content="editId"></modal-header>
            <edit v-if="editModal" @cancel="cancel" @edit="subCallback" :operaility-data="operailityData"
                  type="center"></edit>
            <div slot="footer"></div>
        </Modal>
        <!--导入弹窗-->
        <Modal :mask-closable="false" close-on-click-modal="false" height="200" v-model="toChannelModal" title="对话框标题"
               class-name="vertical-center-modal" :width="800">
            <modal-header slot="header" :content="toChannelId"></modal-header>
            <toChannel v-if="toChannelModal" @remove="subCallback" @cancel="cancel" @toChannel="subCallback"
                       :operaility-data="operailityData"></toChannel>
            <div slot="footer"></div>
        </Modal>
    </div>
</template>
<script>
    import questionDiffLevelOption from '../../common/questionDiffLevelOption' // 难度组件
    import questionTypeOption from '../../common/questionTypeOption' // 试题类型
    import subjectHead from '../../common/subjectHead.vue'
    import show from './questionsManagement_show.vue'
    import edit from './questionsManagement_input.vue'
    // import add from './questionsManagement_add.vue'
    import toChannel from './questions_toChannel.vue'
    import api from './api'
    import {questionsManageList as rules} from '../rules'

    let Util = null;
    export default {
        data() {
            return {
                rules,
                //* 表格 *//
                self: this,
                totalCount: 0,
                loading: false,
                // loading: false,
                dynamicHt: 100, // 表格高度
                multipleSelection: [],
                operailityData: {},
                knowledgeIdArr: [],
                tableData: [],
                formValidate: {
                    openType: '',
                    knowledgeId: '',
                    diffLevelCode: '',
                    questionsTypeId: '',
                    title: '',
                    grade: '',
                    subject: '',
                    term: ''
                },
                toChannelModal: false,
                showId: {
                    id: 'show',
                    title: '查看试题'
                },
                addId: {
                    id: 'add',
                    title: '新增试题'
                },
                toChannelId: {
                    id: 'toChannelId',
                    title: '导入'
                },
                editId: {
                    id: 'edit',
                    title: '修改试题'
                }
            }
        },
        created() {
            this.init()
        },
        methods: {
            //初始化函数
            init() {
                Util = this.$util;
                this.myPages = Util.pageInitPrams;
                this.queryQptions = {
                    url: api.list.path,
                    params: {curPage: 1, pageSize: Util.pageInitPrams.pageSize}
                }
                this.setTableData();
                this.getKnowledge();
            },
            getKnowledge() {
                this.knowledgeIdArr = [];
                this.formValidate.knowledgeId = '';
                if (!this.formValidate.subject) {
                    return
                }
                this.ajax({
                    ajaxSuccess: res => this.knowledgeIdArr = res.data,
                    ajaxParams: {
                        url: '/textbookContent/queryKnowledgeList',
                        method: 'get',
                        params: {
                            grade: this.formValidate.grade || '',
                            subject: this.formValidate.subject,
                            term: this.formValidate.term || '0'
                        }
                    }
                })
            },
            /************************** 表格 ************************/
            /*
            * checkbox 选择后触发事件
            * @param val Array 存在所有的选择每一个行数据
            */
            handleSelectionChange(val) {
                this.multipleSelection = val;
            },
            /*
             * 设置表格数据
             * @param isLoading Boolean 是否加载
             */
            setTableData(isLoading) {
                Object.assign(this.queryQptions.params, this.formValidate);
                this.ajax({
                    ajaxSuccess: 'listDataSuccess',
                    ajaxParams: this.queryQptions
                }, isLoading)
            },
            // 数据请求成功回调
            listDataSuccess(res, m, loading) {
                this.totalCount = res.data.totalCount || 0;
                this.tableData = res.data.dataList || [];
            },
            //查看
            show(item) {
                this.operailityData = item;
                this.openModel("show");
            },
            //修改
            edit(item) {
                this.operailityData = item;
                this.openModel("edit");
            },
            //获取当前所选中的教学科目
            changeSubject(val, sel) {
                this.formValidate.grade = sel.grade;
                this.formValidate.term = sel.term;
                this.formValidate.subject = sel.subject;
                this.getKnowledge();
                this.setTableData();
            },
            handleOpen(key, keyPath) {
                console.log(key, keyPath);
            },
            handleClose(key, keyPath) {
                console.log(key, keyPath);
            },
            //搜索查询
            searchEvent() {
                let isSubmit = this.handleSubmit('formValidate');
                if (isSubmit) {
                    this.setTableData()
                }
            },
            /*
           * 列表查询方法
           * @param string 查询from的id
           * */
            handleSubmit(name) {
                let flag = false
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        flag = true;
                    } else {
                        this.errorMess('表单验证失败!');
                    }
                })
                return flag
            },
            //新增弹窗
            add() {
                this.openModel('add')
            },
            toChannel() {
                this.openModel('toChannel')
            },
            //批量删除
            toRemove() {
                Util.todoConfirm({
                    title: '确定删除选择试题吗？',
                    content: {id: 'todoId', title: '删除'},
                    data: {
                        data: {ids: Util.getStrByArr(this.multipleSelection, 'id')},
                        api: api.delete,
                        msg: '删除'
                    },
                    close: () => {//关闭后触发
                        this.subCallback()
                    },
                    confirm: (result) => {
                    }
                })
            },
            //设置表格及分页的位置
            setTableDynHeight() {
                let content = this.$refs.content;
                let parHt = content.parentNode.offsetHeight;
                let myTable = this.$refs.myTable;
                let paginationHt = 105;
                this.dynamicHt = parHt - myTable.offsetTop - paginationHt;
                this.$refs.myTable.style.height = this.dynamicHt + 'px';
            },
            /*
             * 打开指定的模态窗体
             * @param options string 当前指定的模态:"add"、"edit"
             * */
            openModel(options) {
                this[options + 'Modal'] = true;
            },
            /*
             * 监听子组件通讯的方法
             * 作用:根据不同的参数关闭对应的模态
             * @param targer string example:"add"、"edit"
             * */
            cancel(targer) {
                this[targer + 'Modal'] = false;
            },
            /*
             * 监听子组件通讯的方法
             * 作用:ajax请求成功回调,该监听方法在libs/util 中的混合模式下定义回调
             * @param targer string example:"add"、"edit"
             * @param targer string 提示返回的ajax回调返回的信息改信息在对应的子组件中定义
             * 例如:errorTitle、errorTitle
             *addMessTitle:{
             *    type:'add',
             *    successTitle:'添加成功!',
             *    errorTitle:'添加失败!',
             *    ajaxSuccess:'ajaxSuccess',
             *    ajaxError:'ajaxError',
             *    ajaxParams:{
             *      url:'/role/add',
             *      method:'post'
             *    }
             *    }
             * @param udata boolean 默认false  是否不需要刷新当前表格数据
             * */
            subCallback(target, title, updata) {
                this.cancel(target);
                if (title) {
                    this.successMess(title);
                }
                if (!updata) {
                    this.setTableData();
                }
            }
        },
        mounted() {
            //页面dom稳定后调用
            this.$nextTick(function () {
                //初始表格高度及分页位置
                this.setTableDynHeight();
                //为窗体绑定改变大小事件
                let Event = Util.events;
                Event.addHandler(window, "resize", this.setTableDynHeight);
            })
        },
        components: {
            questionDiffLevelOption, questionTypeOption,
            subjectHead, show, edit, toChannel
        }
    }
</script>
<style lang="scss">
    .clearfix:after {
        content: " ";
        display: block;
        clear: both;
        height: 0;
    }

    .clearfix {
        zoom: 1;
    }

    .el-menu-vertical-demo {
        overflow: hidden;
    }

    .el-col-3 .el-menu--dark .el-submenu .el-menu {
        background: #ffffff;
    }

    .el-col-3 .el-menu--dark .el-submenu .el-menu .el-menu-item:hover {
        background: none;
    }

    .el-col-3 .el-menu--dark .el-menu-item:hover, .el-menu--dark .el-submenu__title:hover {
        color: #11a63f;
        background: none;
    }

    .el-col-3 .is-active .el-menu .is-active {
        color: #11a63f;
    }

    .el-col-3 .el-menu--dark .el-menu-item, .el-menu--dark .el-submenu__title {
        color: #000;
    }

    .el-col-20 {
        width: 86%;
        margin-left: 1%;
    }

    #menu {
        overflow-y: scroll;
    }
</style>



