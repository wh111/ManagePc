<template>
    <div class="moudle-wrap modal clearfix" id="content" ref="content">
        <el-col>
            <div>
                <el-form ref="formValidate" :rules="rules" :model="formValidate" label-width="100px"
                         class="demo-ruleForm" inline>
                    <el-row class="search-from">
                        <date-group :dateGroup="{text:'',startDate:formValidate.startTime,endDate:formValidate.endTime}"
                                    style="display: inline;">
                            <el-form-item slot="start" prop="beginTime" label="开始时间">
                                <el-date-picker v-model="formValidate.startTime" type="datetime" :editable="false"
                                                placeholder="选择时间" :picker-options="pickerOptions0"
                                                @change="handleStartTime">
                                </el-date-picker>
                            </el-form-item>
                            <i></i>
                            <el-form-item slot="end" prop="endTime" label="结束时间">
                                <el-date-picker v-model="formValidate.endTime" type="datetime" :editable="false"
                                                placeholder="选择时间" :picker-options="pickerOptions1"
                                                @change="handleEndTime">
                                </el-date-picker>
                            </el-form-item>
                        </date-group>
                        <el-form-item label="申请状态：" prop="status">
                            <el-select size="small" v-model="formValidate.auditStatus" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <el-option label="待审核" value="0"></el-option>
                                <el-option label="已通过" value="1"></el-option>
                                <el-option label="已拒绝" value="2"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-button class="search-btn" size="small" type="primary" @click="searchEvent">搜索</el-button>
                    </el-row>
                    <!--<el-col :span="14" style="margin-bottom:20px">-->
                    <!--<el-button size="small" type="primary" @click="add">新增</el-button>-->
                    <!--<el-button size="small" type="danger" @click="down">批量删除</el-button>-->
                    <!--</el-col>-->
                </el-form>
            </div>

            <div id="myTable" ref="myTable">
                <el-table align="center" :context="self" :height="dynamicHt" :data="tableData" tooltip-effect="dark"
                          style="width: 100%">
                    <el-table-column prop="index" label="序号"></el-table-column>
                    <el-table-column label="任务名称" align="center" prop="name" width="120" show-overflow-tooltip>
                        <template slot-scope="scope">
                            刷题大赛
                        </template>
                    </el-table-column>
                    <el-table-column label="申请人" align="center" prop="publisherName"
                                     show-overflow-tooltip></el-table-column>
                    <el-table-column label="类型" align="center" prop="type" show-overflow-tooltip></el-table-column>
                    <el-table-column label="申请时间" align="center" prop="updateTime" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.updateTime | formatDate('yyyy-MM-dd HH:mm') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="开始时间" align="center" prop="beginTime" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.beginTime | formatDate('yyyy-MM-dd HH:mm') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="结束时间" align="center" prop="endTime" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.endTime | formatDate('yyyy-MM-dd HH:mm') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="状态" align="center" prop="auditStatus" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.auditStatus | progressStatus }}
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" align="center" width="240">
                        <template slot-scope="scope">
                          <el-button size="small" class="tableMakeItem" @click="show(scope.row)">查看</el-button>
                          <el-button size="small" class="tableMakeItem" :disabled="scope.row.auditStatus != 0"
                                       @click="able(scope.row)">通过
                            </el-button>
                          <el-button size="small" class="tableMakeItem" :disabled="scope.row.auditStatus != 0"
                                     @click="enable(scope.row)">拒绝
                            </el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <div style="margin: 10px 50px 10px 0;">
                    <div style="float: right;">
                        <el-pagination @size-change="changePageSize" @current-change="changePage"
                                       :current-page.sync="myPages.currentPage" :page-size="myPages.pageSize"
                                       layout="total,prev, pager, next, jumper" :total="totalCount">
                        </el-pagination>
                    </div>
                </div>
            </div>
            <!--新增弹窗-->
            <Modal :mask-closable="false" v-model="showModal" height="200" title="对话框标题"
                   class-name="vertical-center-modal" :width="1000">
                <modal-header slot="header" :content="showId"></modal-header>
                <show v-if="showModal" @cancel="cancel" @show="subCallback" :operaility-data="operailityData"></show>
                <div slot="footer"></div>
            </Modal>
            <Modal :mask-closable="false" width="600" v-model="editModal" title="收录" class-name="vertical-center-modal"
                   :loading="loading">
                <modal-header slot="header" :content="editId"></modal-header>
                <el-form :rules="submitDataRules" ref="submitData" :model="submitData" v-if="editModal">
                    <el-form-item label="To：">{{ user }}</el-form-item>
                    <el-form-item v-if="!isStop" prop="reason">
                        <el-input :rows="4" type="textarea" placeholder="您提供的题目符合平台要求，已被录入，请继续关注本平台！"
                                  v-model="submitData.reason"></el-input>
                    </el-form-item>
                    <el-form-item v-else prop="reason">
                        <el-input :rows="4" type="textarea" placeholder="很抱歉您提供的试题未能符合平台要求，请继续关注本平台"
                                  v-model="submitData.reason"></el-input>
                    </el-form-item>
                    <el-form-item style="text-align: center">
                        <load-btn @listenSubEvent="listenSubEvent" :btnData="loadBtn"></load-btn>
                    </el-form-item>
                </el-form>
                <div slot="footer"></div>
            </Modal>
            <!---->
        </el-col>


    </div>
</template>
<script>
    import api from "./api";
    import show from "./components/task_show.vue";
    import {submitDataRules} from '../rules';

    let Util = null;
    export default {
        props: ["contentHeight"],
        data() {
            return {
                //* 表格 *//
                rules: {},
                submitDataRules,
                self: this,
                totalCount: 0,
                loadBtn: {
                    title: "提交",
                    callParEvent: "listenSubEvent"
                },
                isStop: false,
                user: '',
                loading: false,
                dynamicHt: 0, // 表格高度
                operailityData: {},
                item: {},
                dynamicHt: "",
                tableData: [],
                formValidate: {
                    publishType: "1",
                    startTime: "",
                    endTime: "",
                    auditStatus: ""
                },
                showId: {
                    id: "show",
                    title: "查看任务"
                },
                addId: {
                    id: "add",
                    title: "新增任务"
                },
                editId: {
                    id: "edit",
                    title: "审核任务"
                },
                submitData: {
                    id: "",
                    auditStatus: "",
                    reason: ""
                },
                editMessTitle: {
                    type: "edit",
                    callback: "close",
                    successTitle: "操作成功!",
                    errorTitle: "操作失败!",
                    ajaxSuccess: res => {
                        this.editModal = false;
                        if (res.status.code != "0") return false;
                        this.successMess("操作成功!");
                        this.init();
                    },
                    ajaxError: "ajaxError",
                    ajaxParams: {
                        url: api.audit.path,
                        method: api.audit.method
                    }
                }
            };
        },
        created() {
            this.init();
        },
        methods: {
            //初始化函数
            init() {
                Util = this.$util;
                this.myPages = Util.pageInitPrams;
                this.queryQptions = {
                    url: api.list.path,
                    params: {
                        curPage: 1,
                        pageSize: Util.pageInitPrams.pageSize
                    }
                };
                this.setTableData();
            },
            /************************** 表格 ************************/
            /*
             * 设置表格数据
             * @param isLoading Boolean 是否加载
             */
            setTableData(isLoading) {
                let data = this.$util.getFormData(this.formValidate);
                data.startTime = (data.startTime && new Date(data.startTime).getTime()) || "";
                data.endTime = (data.endTime && new Date(data.endTime).getTime()) || "";
                Object.assign(this.queryQptions.params, data);
                this.ajax({
                    ajaxSuccess: "listDataSuccess",
                    ajaxParams: this.queryQptions
                }, isLoading);
            },
            // 数据请求成功回调
            listDataSuccess(res, m, loading) {
                this.totalCount = res.data.totalCount || 0;
                this.tableData = this.addIndex(res.data.dataList || []);
            },
            //查看
            show(item) {
                this.operailityData = item;
                this.openModel("show");
            },
            //修改
            able(item) {
                this.user = item.publisherName;
                this.isStop = false;
                this.submitData = {
                    id: item.id,
                    auditStatus: "1",
                    reason: ""
                };
                this.editModal = true;
            },
            enable(item) {
                //冻结   解冻
                this.isStop = true;
                this.user = item.publisherName;
                this.submitData = {
                    id: item.id,
                    auditStatus: "2",
                    reason: ""
                };
                this.editModal = true;
            },
            //搜索查询
            searchEvent() {
                let isSubmit = this.handleSubmit("formValidate");
                if (isSubmit) {
                    this.setTableData();
                }
            },
            /*
             * 列表查询方法
             * @param string 查询from的id
             * */
            handleSubmit(name) {
                let flag = false;
                this.$refs[name].validate(valid => {
                    if (valid) {
                        flag = true;
                    }
                });
                return flag;
            },
            /*
             * 点击提交按钮 监听是否提交数据
             * @param isLoadingFun boolean  form表单验证是否通过
             * */
            listenSubEvent(isLoadingFun) {
                let isSubmit = this.submitForm("submitData");
                if (isSubmit) {
                    if (!isLoadingFun) isLoadingFun = function () {
                    };
                    isLoadingFun(true);
                    this.editMessTitle.ajaxParams.data = this.getFormData(this.submitData);
                    //          console.log(this.editMessTitle.ajaxParams.data)
                    this.ajax(this.editMessTitle, isLoadingFun);
                }
            },
            /*
             * 点击提交按钮 监听是否验证通过
             * @param formName string  form表单v-model数据对象名称
             * @return flag boolean   form表单验证是否通过
             * */
            submitForm(formName) {
                let flag = false;
                this.$refs[formName].validate(valid => {
                    if (valid) {
                        flag = true;
                    }
                });
                return flag;
            },
            /*
             * 获取表单数据
             * @return string  格式:id=0&name=aa
             * */
            getFormData(data) {
                let myData = Util._.defaultsDeep({}, data);
                return myData;
            },
            //设置表格及分页的位置
            setTableDynHeight() {
                let myTable = this.$refs.myTable;
                let paginationHt = 120;
                this.dynamicHt = this.contentHeight - myTable.offsetTop - paginationHt;
            },
            /*
             * 监听子组件通讯的方法
             * 作用:根据不同的参数关闭对应的模态
             * @param targer string example:"add"、"edit"
             * */
            cancel(targer) {
                this[targer + "Modal"] = false;
            },
            /*
             * 监听子组件通讯的方法
             * 作用:ajax请求成功回调,该监听方法在libs/util 中的混合模式下定义回调
             * @param targer string example:"add"、"edit"
             * @param targer string 提示返回的ajax回调返回的信息改信息在对应的子组件中定义
             * 例如:errorTitle、errorTitle
             *addMessTitle:{
             *    type:'add',
             *    successTitle:'添加成功!',
             *    errorTitle:'添加失败!',
             *    ajaxSuccess:'ajaxSuccess',
             *    ajaxError:'ajaxError',
             *    ajaxParams:{
             *      url:'/role/add',
             *      method:'post'
             *    }
             *    }
             * @param udata boolean 默认false  是否不需要刷新当前表格数据
             * */
            subCallback(target, title, updata) {
                this.cancel(target);
                if (title) {
                    this.successMess(title);
                }
                if (!updata) {
                    this.setTableData();
                }
            },
            /*
             * 打开指定的模态窗体
             * @param options string 当前指定的模态:"add"、"edit"
             * */
            openModel(options) {
                this[options + "Modal"] = true;
            }
        },
        mounted() {
            //页面dom稳定后调用
            this.$nextTick(function () {
                //初始表格高度及分页位置
                this.setTableDynHeight();
                //为窗体绑定改变大小事件
                let Event = Util.events;
                Event.addHandler(window, "resize", this.setTableDynHeight);
            });
        },
        watch: {
            contentHeight() {
                this.setTableDynHeight();
            }
        },
        components: {
            show
        }
    };
</script>

