<template>
    <div class="moudle-wrap modal clearfix" id="content" ref="content">
        <el-col>
            <div>
                <el-form :inline="true" ref="formValidate" :rules="rules" :model="formValidate" class="demo-ruleForm">
                    <el-row class="search-from">
                      <el-form-item label="商品状态：" prop="status" style="padding-left: 13px">
                            <el-select size="small" v-model="formValidate.status" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <el-option label="待审核" value="0"></el-option>
                                <el-option label="在售" value="1"></el-option>
                                <el-option label="审核驳回" value="2"></el-option>
                                <el-option label="下架" value="3"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="年级：" prop="grade">
                            <el-select size="small" v-model="formValidate.grade" placeholder=""
                                       @change="changeGrade">
                                <el-option label="全部" value=""></el-option>
                                <grade-option-list></grade-option-list>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="科目：" prop="subject">
                            <el-select size="small" v-model="formValidate.subject" placeholder="">
                                <el-option label="全部" value=""></el-option>
                                <el-option v-for="(item,index) in subjectList" :key="index" :label="item.value"
                                           :value="item.code"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="商品名称：" prop="title">
                            <el-input size="small" v-model="formValidate.title" placeholder="输入商品名称"></el-input>
                        </el-form-item>
                        <el-form-item>
                          <el-button class="search-btn" size="small" @click="searchEvent">搜索
                            </el-button>
                        </el-form-item>
                    </el-row>
                    <el-col :span="14" style="margin-bottom:20px">
                      <el-button size="small" class="greenButton" @click="add">新增</el-button>

                    </el-col>
                </el-form>
            </div>

            <div id="myTable" ref="myTable">
                <el-table align="center" :context="self" :height="dynamicHt" :data="tableData" tooltip-effect="dark"
                          style="width: 100%" @selection-change="handleSelectionChange">
                  <el-table-column :selectable="canDel" type="selection" width="50"></el-table-column>
                  <el-table-column align="center" prop="index" label="序号" width="70px"
                                   show-overflow-tooltip></el-table-column>
                    <el-table-column label="商品状态" prop="status" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.status | goodsStatus }}
                        </template>
                    </el-table-column>
                    <el-table-column label="商品名称" align="center" prop="title" show-overflow-tooltip></el-table-column>
                    <el-table-column label="商品编号" align="center" prop="no" show-overflow-tooltip></el-table-column>
                    <el-table-column label="规格" align="center" prop="spec" show-overflow-tooltip></el-table-column>
                    <el-table-column label="单位" align="center" prop="unit" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.unit | unit }}
                        </template>
                    </el-table-column>
                    <el-table-column label="类别" align="center" prop="types" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.types | goodType }}
                        </template>
                    </el-table-column>
                    <el-table-column label="原价(元)" align="center" prop="originalPrice"
                                     show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{scope.row.originalPrice | money }}
                        </template>
                    </el-table-column>
                    <el-table-column label="现价(元)" align="center" prop="currentPrice"
                                     show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{scope.row.currentPrice | money }}
                        </template>
                    </el-table-column>
                    <el-table-column label="销量" align="center" prop="sales" show-overflow-tooltip></el-table-column>
                    <el-table-column label="折扣" align="center" prop="discount" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.discount / 10 == 10 ? '不打' : scope.row.discount / 10 }}折
                        </template>
                    </el-table-column>
                    <el-table-column label="添加时间" align="center" prop="createTime" show-overflow-tooltip>
                        <template slot-scope="scope">
                            {{ scope.row.createTime | formatDate('yyyy-MM-dd HH:mm') }}
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" align="center" width="360">
                        <template slot-scope="scope">
                          <el-button size="small" class="tableMakeItem" @click="show(scope.row)">查看</el-button>
                            <el-button :disabled="scope.row.status == '0'" size="small"
                                       class="tableMakeItem"
                                       @click="edit(scope.row)">修改
                            </el-button>
                            <!--<el-button :disabled="scope.row.status != '0' && scope.row.status != '2'" size="small" type="success"-->
                            <!--@click="">审核-->
                            <!--</el-button>-->
                          <el-button :disabled="scope.row.status != '1'" size="small" class="tableMakeItem"
                                     @click="down(scope.row)">下架
                            </el-button>
                          <el-button :disabled="scope.row.status != '3'" size="small" class="tableMakeItem"
                                     @click="up(scope.row)">上架
                            </el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <div style="margin: 10px 50px 10px 0;">
                  <el-button :disabled="multipleSelection.length == '0'" size="small" class="deleteButton"
                             @click="down('')">批量下架
                  </el-button>
                    <div style="float: right;">
                        <el-pagination
                                @size-change="changePageSize"
                                @current-change="changePage"
                                :current-page.sync="myPages.currentPage"
                                :page-size="myPages.pageSize"
                                layout="total,prev, pager, next, jumper"
                                :total="totalCount">
                        </el-pagination>
                    </div>
                </div>
            </div>
        </el-col>
        <!--添加商品-->
        <Modal
                :mask-closable="false"
                width="1000"
                v-model="addModal"
                title="添加商品"
                class-name="vertical-center-modal"
                :loading="loading">
            <modal-header slot="header" :content="addId"></modal-header>
            <add v-if="addModal" @cancel="cancel" @add="subCallback"></add>
            <div slot="footer"></div>
        </Modal>
        <!--修改商品-->
        <Modal
                :mask-closable="false"
                width="1000"
                v-model="editModal"
                title="添加商品"
                class-name="vertical-center-modal"
                :loading="loading">
            <modal-header slot="header" :content="editId"></modal-header>
            <edit v-if="editModal" @cancel="cancel" @edit="subCallback" :operaility-data="operailityData"></edit>
            <div slot="footer"></div>
        </Modal>
        <!--查看商品-->
        <Modal
                :mask-closable="false"
                width="1000"
                v-model="showModal"
                title="添加商品"
                class-name="vertical-center-modal"
                :loading="loading">
            <modal-header slot="header" :content="showId"></modal-header>
            <show v-if="showModal" @cancel="cancel" @show="subCallback" :operaility-data="operailityData"></show>
            <div slot="footer"></div>
        </Modal>
    </div>
</template>
<script>
    import add from './goodsList_add.vue'
    import show from './goodsList_show.vue'
    import edit from './goodsList_edit.vue'
    import gradeOptionList from '../../common/gradeOption.vue'
    import api from './api'
    import {list as rules} from '../integralManage/rules'

    let Util = null;
    export default {
        data() {
            return {
                rules,
                //* 表格 *//
                self: this,
                totalCount: 0,
                loading: false,
                dynamicHt: 100, // 表格高度
                multipleSelection: [],
                operailityData: {},
                tableData: [],
                formValidate: {
                    status: '',//状态
                    grade: '',//年级
                    name: '',//名称
                    subject: ''//科目
                },
                subjectList: [],
                addId: {
                    id: 'add',
                    title: '添加商品'
                },
                editId: {
                    id: 'edit',
                    title: '修改商品'
                },
                showId: {
                    id: 'show',
                    title: '查看商品'
                }
            }
        },
        created() {
            this.init()
        },
        methods: {
            //初始化函数
            init() {
                Util = this.$util;
                this.subjectList = this.$store.getters['app/gradeMap'](12)
                this.myPages = Util.pageInitPrams;
                this.queryQptions = {
                    url: api.list.path,
                    params: {curPage: 1, pageSize: Util.pageInitPrams.pageSize}
                }
                this.setTableData();
            },
            /*
            *
            * */
            changeGrade(val) {
                this.formValidate.subject = '';
                if (val != '') {
                    this.subjectList = this.$store.getters['app/gradeMap'](val)
                } else {
                    this.subjectList = this.$store.getters['app/gradeMap'](12)
                }
            },
            /************************** 表格 ************************/
            /*
            * checkbox 选择后触发事件
            * @param val Array 存在所有的选择每一个行数据
            */
            handleSelectionChange(val) {
                this.multipleSelection = val;
            },
            /*
             * 设置表格数据
             * @param isLoading Boolean 是否加载
             */
            setTableData(isLoading) {
                Object.assign(this.queryQptions.params, this.formValidate);
                this.ajax({
                    ajaxSuccess: 'listDataSuccess',
                    ajaxParams: this.queryQptions
                }, isLoading)
            },
            canDel(row) {
                return row.status == 1
            },
            // 数据请求成功回调
            listDataSuccess(res, m, loading) {
                this.totalCount = res.data.totalCount || 0;
                this.tableData = this.addIndex(res.data.dataList || []);
            },
            //获取当前所选中的教材板块
            materialChange(item) {
                console.log(item)
            },
            //查看
            show(item) {
                this.operailityData = item;
                this.openModel("show");
            },
            //修改
            edit(item) {
                this.operailityData = item;
                this.openModel("edit");
            },
            //搜索查询
            searchEvent() {
                let isSubmit = this.handleSubmit('formValidate');
                if (isSubmit) {
                    this.setTableData()
                }
            },
            /*
           * 列表查询方法
           * @param string 查询from的id
           * */
            handleSubmit(name) {
                let flag = false
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        flag = true;
                    } else {
                        this.errorMess('表单验证失败!');
                    }
                })
                return flag
            },
            //新增弹窗
            add() {
                this.openModel("add");
            },
            //批量删除
            down(item) {
                Util.todoConfirm({
                    title: '确定下架该商品吗？',
                    content: {id: 'todoId', title: '下架'},
                    data: {
                        data: {ids: Util.getStrByArr(item ? [item] : this.multipleSelection, 'id')},
                        api: api.down,
                        msg: '下架'
                    },
                    close: () => {//关闭后触发
                        this.subCallback()
                    },
                    confirm: (result) => {
                    }
                })
            },
            up(item) {
                Util.todoConfirm({
                    title: '确定上架该商品吗？',
                    content: {id: 'todoId', title: '上架'},
                    data: {
                        data: {ids: Util.getStrByArr(item ? [item] : this.multipleSelection, 'id')},
                        api: api.up,
                        msg: '上架'
                    },
                    close: () => {//关闭后触发
                        this.subCallback()
                    },
                    confirm: (result) => {
                    }
                })
            },
            /*
              * 列表数据只能选择一个
              * @param isOnly true  是否只选择一个
              */
            isSelected(isOnly) {
                let len = this.multipleSelection.length;
                let flag = true;
                if (len == 0) {
                    this.showMess("请选择数据!");
                    flag = false;
                }
                return flag;
            },
            //设置表格及分页的位置
            setTableDynHeight() {
                let content = this.$refs.content;
                let parHt = content.parentNode.offsetHeight;
                let myTable = this.$refs.myTable;
                let paginationHt = 105;
                this.dynamicHt = parHt - myTable.offsetTop - paginationHt;
                this.$refs.myTable.style.height = this.dynamicHt + 'px';
                // this.$refs.menu.style.height = myTable.parentNode.offsetHeight + 'px';
            },
            /*
             * 监听子组件通讯的方法
             * 作用:根据不同的参数关闭对应的模态
             * @param targer string example:"add"、"edit"
             * */
            cancel(targer) {
                this[targer + 'Modal'] = false;
            },
            /*
             * 监听子组件通讯的方法
             * 作用:ajax请求成功回调,该监听方法在libs/util 中的混合模式下定义回调
             * @param targer string example:"add"、"edit"
             * @param targer string 提示返回的ajax回调返回的信息改信息在对应的子组件中定义
             * 例如:errorTitle、errorTitle
             *addMessTitle:{
             *    type:'add',
             *    successTitle:'添加成功!',
             *    errorTitle:'添加失败!',
             *    ajaxSuccess:'ajaxSuccess',
             *    ajaxError:'ajaxError',
             *    ajaxParams:{
             *      url:'/role/add',
             *      method:'post'
             *    }
             *    }
             * @param udata boolean 默认false  是否不需要刷新当前表格数据
             * */
            subCallback(target, title, updata) {
                this.cancel(target);
                if (title) {
                    this.successMess(title);
                }
                if (!updata) {
                    this.setTableData();
                }
            },
            /*
             * 打开指定的模态窗体
             * @param options string 当前指定的模态:"add"、"edit"
             * */
            openModel(options) {
                this[options + 'Modal'] = true;
            }
        },
        mounted() {
            //页面dom稳定后调用
            this.$nextTick(function () {
                //初始表格高度及分页位置
                this.setTableDynHeight();
                //为窗体绑定改变大小事件
                let Event = Util.events;
                Event.addHandler(window, "resize", this.setTableDynHeight);
            })
        },
        components: {
            add, show, edit,
            gradeOptionList
        }
    }
</script>
<style lang="scss" scoped>
    .clearfix:after {
        content: " ";
        display: block;
        clear: both;
        height: 0;
    }

    .clearfix {
        zoom: 1;
    }

    .el-col-20 {
        width: 86%;
        margin-left: 1%;
    }

    #menu {
        overflow-y: scroll;
    }

    .btn-lable {
        font-size: 16px;
    }
</style>



